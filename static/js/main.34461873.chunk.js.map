{"version":3,"sources":["components/Navbar/navbar.js","components/jumbotron/jumbotron.js","components/Row/row.js","components/Card/card.js","components/Wrapper/wrapper.js","App.js","index.js"],"names":["Title","props","react_default","a","createElement","className","score","topScore","Jumbotron","Row","children","Card","src","image","status","clicked","id","onClick","turnTrue","alt","name","Wrapper","App","state","Pokemon","Score","card","document","getElementById","concat","cardStatus","getAttribute","setAttribute","_this","cardIsFalse","alert","allCardsArr","getElementsByClassName","i","length","console","log","cardIsTrue","shuffle","setState","Object","objectSpread","addScore","array","j","temporary","Math","floor","random","_this2","this","navbar","jumbotron","wrapper","row","map","monster","key","Component","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.34461873.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction Title(props) {\n    return(\n\n        <div>\n            <nav className=\"shadow-lg navbar mb-0 fixed-top\">\n                <ul>\n                    <li className=\"navbar-brand mb-0 pb-0 font-weight-bold text-light\">Clicky Game</li>\n                    <li className=\" float-right navbar-brand mt-0  nav-link\">Score: {props.score} | Top Score: {props.topScore}</li>\n                </ul>\n            </nav> \n        </div>\n\n    );\n}\n\n\nexport default Title;","import React from 'react';\nimport './style.css';\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron mt-5 jumbotron-fluid\">\n  <div className=\"container\">\n    <h1 className=\"display-4 text-center text-light title font-weight-bold\">PokeMemory!</h1>\n    <p className=\"lead text-center text-light rules\">To Win The Game, Click On All The Images Only Once. Click An Image More Than Once And You'll Start Over!</p>\n  </div>\n        </div>\n    )\n    \n}\n\nexport default Jumbotron;","import React from 'react';\n\nfunction Row(props) {\n    return  <div className=\"row\">{props.children}</div>\n    \n};\n\nexport default Row;","import React from \"react\"\nimport './style.css';\n\n\n\nfunction Card(props) {\n    return(\n      <img src={props.image} status={props.clicked} id={props.id} onClick={() => props.turnTrue(props.id)}  alt={props.name} className=\"col-2 img-thumbnail m-2 shadow pokemon\"/>\n    )\n}\n\nexport default Card;","import React from 'react';\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper container mb-5 mt-5\">{props.children}</div>\n}\n\nexport default Wrapper;","import React, {Component} from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/navbar';\nimport Jumbotron from './components/jumbotron/jumbotron';\n// import Container from './components/container/container';\nimport Row from './components/Row/row';\nimport Card from './components/Card/card';\nimport Wrapper from './components/Wrapper/wrapper';\nimport Pokemon from './pokemon.json';\n// import { all } from 'q';\n\nclass App extends Component {\n  state = {\n    Pokemon,\n    Score: 0,\n    topScore: 0\n  };\n\n\n// A function that will make the selected cards clicked property true\n  turnTrue = id => {\n    const card = document.getElementById(`${id}`);\n    const cardStatus = card.getAttribute(\"status\");\n\nif ( cardStatus === \"false\") {\n   card.setAttribute(\"status\", \"true\");\n  this.cardIsFalse();\n}\nelse if (cardStatus === \"true\") {\n  alert(\"You already clicked that card! Take this L! Try Again!\");\n      const allCardsArr = document.getElementsByClassName(\"pokemon\");\n      for (let i = 0; i < allCardsArr.length; i++) {\n        allCardsArr[i].setAttribute(\"status\", \"false\")\n      }\n      console.log(\"Made it this far!!!!\")\n  this.cardIsTrue();\n}\n};\n// ------My thoughts-------//\n//When any card is clicked, check if it is false, if clicked is false, turn it true add to the score and randomly order the cards.\n//if clicked is true when the card is clicked, then reset the score, set all cards to false, and reorder them.\n //-----------------------//\n    cardIsTrue = () => {\n      this.shuffle(Pokemon);\n      this.setState({\n        Pokemon,\n        Score: 0,\n        ...this.state.topScore\n      })\n\n    };\n\n    cardIsFalse = () => {\n      let score = this.state.Score;\nlet addScore = score + 1;\nif (addScore > this.state.topScore) {this.setState({\n  Pokemon,\n  ...this.state.Score,\n  topScore: addScore\n\n})}\nthis.setState({Pokemon,\nScore: addScore ,\n...this.state.topScore});\n\nthis.shuffle(Pokemon)\n    };\n\n  //This will shuffle the cards/pokemon. Credits to Fisher Yates algorithm \n  shuffle = (array) => {\n    let i = array.length, j, temporary;\n    while(i-- > 0) {\n      j = Math.floor(Math.random() * (i));\n      temporary = array[j];\n      array[j] = array[i]\n      array[i] = temporary\n    }\n  };\n  \n\n  render() {\n    return (\n      <div>\n        <Navbar\n        score={this.state.Score}\n        topScore={this.state.topScore} />\n        <Jumbotron />\n        <Wrapper>\n          <Row>\n          {this.state.Pokemon.map(monster => (\n            <Card \n                  turnTrue={this.turnTrue}\n                  key={monster.id} \n                  image={monster.image}     \n                  name={monster.name}\n                  clicked={monster.clicked}\n                  id={monster.id}\n                  />\n          ))}\n          </Row>\n        </Wrapper>\n      </div>\n      \n    );\n  }\n}\n\n \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}